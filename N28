<!DOCTYPE html>
<html lang="my">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·ÄÖ·ÄÆ·Äô·Ä∂·Äõ·Ä±·Ä∏</title>
<style>
body {
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #667eea, #764ba2);
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.container {
  flex: 1;
  overflow-y: auto;
  max-width: 600px;
  margin: 0 auto;
  padding: 1rem;
  padding-bottom: 260px; /* fallback, JS overrides */
  background: rgba(255,255,255,0.95);
  border-radius: 1rem 1rem 0 0;
  box-shadow: 0 8px 20px rgba(0,0,0,0.2);
  backdrop-filter: blur(10px);
}

h1.title {
  text-align: center;
  color: #4f46e5;
  margin-bottom: 1rem;
}

.table-wrapper {
  overflow-x: auto;
  margin-bottom: 1rem;
}

table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;
}

th, td {
  padding: 0.6rem;
  text-align: center;
  border-bottom: 1px solid #e5e7eb;
}

th {
  background: #f3f4f6;
  font-weight: 600;
}

tr.active {
  background: #d1fae5;
}

.delete-button {
  background: #22c55e;
  color: white;
  padding: 0.3rem 0.6rem;
  border-radius: 0.4rem;
  border: none;
  cursor: pointer;
}

.delete-button:hover {
  background: #15803d;
}

.date-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: bold;
  margin: 0.5rem 0;
}

.copy-button {
  background: linear-gradient(135deg, #3b82f6, #1e40af);
  color: white;
  padding: 0.3rem 0.75rem;
  border-radius: 0.4rem;
  font-size: 0.85rem;
  border: none;
  cursor: pointer;
}

.copy-button:hover {
  transform: scale(1.05);
}

.fixed-bottom-wrapper {
  position: fixed;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 100%;
  max-width: 600px;
  z-index: 10;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.3rem;
  padding: 0.5rem 0;
  background: #ffffff;
  box-shadow: 0 -4px 12px rgba(0,0,0,0.2);
  border-radius: 0.5rem 0.5rem 0 0;
}

.number-pad {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 0.3rem;
  width: 100%;
  padding: 0.5rem;
}

.button {
  padding: 1rem;
  font-size: 1.2rem;
  font-weight: 600;
  border: none;
  border-radius: 0.6rem;
  color: white;
  cursor: pointer;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}

.button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
}

.button.number { background: linear-gradient(135deg, #60a5fa, #2563eb); }
.button.clear { background: linear-gradient(135deg, #f87171, #dc2626); }
.button.ok { background: linear-gradient(135deg, #34d399, #059669); }
.button.hide { background: linear-gradient(135deg, #fbbf24, #d97706); }

#numberInput {
  grid-column: 1 / span 2;
  text-align: center;
  padding: 0.8rem;
  font-size: 1.1rem;
  border-radius: 0.5rem;
  border: 2px solid #d1d5db;
  cursor: pointer;
}

#hideButton {
  grid-column: 3;
  text-align: center;
  font-weight: 600;
  color: white;
  border-radius: 0.5rem;
  border: none;
  cursor: pointer;
}

#numberInput:focus { outline: none; border-color: #2563eb; }

.motivation-row {
  text-align: center;
  font-weight: bold;
  color: #0ea5e9;
  background: white;
}

@media(max-width: 600px){
  .button { font-size: 1rem; padding: 0.7rem; }
  #numberInput { font-size: 1rem; padding: 0.6rem; }
  table { font-size: 0.8rem; }
  .container { padding-bottom: 260px; }
}
</style>
</head>
<body>
<div class="container">
  <h1 class="title">·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·ÄÖ·ÄÆ·Äô·Ä∂·Äõ·Ä±·Ä∏</h1>
  <div id="activityContainer"></div>
</div>

<div class="fixed-bottom-wrapper">
  <div class="number-pad" id="numberPadGrid">
    <input id="numberInput" type="text" readonly placeholder="Enter activity number">
    <button id="hideButton" class="button hide" onclick="toggleNumberPad()">H</button>

    <button class="button number" onclick="appendNumber('1')">1</button>
    <button class="button number" onclick="appendNumber('2')">2</button>
    <button class="button number" onclick="appendNumber('3')">3</button>
    <button class="button number" onclick="appendNumber('4')">4</button>
    <button class="button number" onclick="appendNumber('5')">5</button>
    <button class="button number" onclick="appendNumber('6')">6</button>
    <button class="button number" onclick="appendNumber('7')">7</button>
    <button class="button number" onclick="appendNumber('8')">8</button>
    <button class="button number" onclick="appendNumber('9')">9</button>
    <button class="button ok" onclick="submitActivity()">OK</button>
    <button class="button number" onclick="appendNumber('0')">0</button>
    <button class="button clear" onclick="clearNumber()">Clear</button>
  </div>
</div>

<script>
let currentNumber = '';
let padHidden = false;

const activityMap = {
  '1': '·Ä°·Ä≠·Äï·Ä∫·Äõ·Ä¨·Äë',
  '2': '·Äú·Ä±·Ä∑·Äú·Ä¨·Äû·ÄÑ·Ä∫·Äö·Ä∞',
  '3': '·Ä°·Äê·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äõ·Ä±·Ä∏',
  '4': '·Äê·ÄÖ·Ä∫·Äî·Ä±·Ä∑·Äû·Ä¨ ·Äû·ÄØ·Ä∂·Ä∏·Äû·Äï·Ä∫',
  '5': '·ÄÑ·ÄΩ·Ä±·ÄÄ·Äº·Ä±·Ä∏·ÄÖ·ÄÆ·Äô·Ä∂',
  '9': '·Ä°·Ä≠·Äï·Ä∫·Äõ·Ä¨·Äù·ÄÑ·Ä∫',
  '10': '·Äô·Äî·ÄÄ·Ä∫·ÄÖ·Ä¨',
  '11': '·Ä°·Äú·ÄØ·Äï·Ä∫·Äï·Äº·Äî·Ä∫',
  '12': '·Äõ·Ä±·ÄÅ·Äª·Ä≠·ÄØ·Ä∏',
  '13': '·Ä°·Äî·Ä¨·Ä∏·Äö·Ä∞',
  '14': '·Äú·Ä±·Ä∑·ÄÄ·Äª·ÄÑ·Ä∑·Ä∫·ÄÅ·Äî·Ä∫·Ä∏',
  '15': '·ÄÄ·Äª·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äû·ÄΩ·Ä¨·Ä∏',
  '18': '·Ä°·Äú·ÄØ·Äï·Ä∫·Äû·ÄΩ·Ä¨·Ä∏',
  '20': '·Äî·Ä±·Ä∑·Äú·Ää·Ä∫·ÄÖ·Ä¨',
  '30': '·Ää·ÄÖ·Ä¨',
  '40': '·Ää·Äâ·Ä∑·Ä∫·Äî·ÄÄ·Ä∫·ÄÖ·Ä¨',
  '45': '·ÄÄ·Äª·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äï·Äº·Äî·Ä∫',
  '60': '·Ä°·ÄÖ·Ä¨·Ä∏·Ä°·Äû·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Äº·ÄÑ·Ä∫',
  '70': '·ÄÖ·Äª·Ä±·Ä∏·Äù·Äö·Ä∫',
  '99': '·ÄÅ·Äõ·ÄÆ·Ä∏·Äû·ÄΩ·Ä¨·Ä∏',
  '1500': '·Äû·ÄÄ·Ä∫',
  '528': '·Äô·Ä≠·Äû·Ä¨·Ä∏·ÄÖ·ÄØ',
  '230': '·Äû·Ä∞·ÄÑ·Äö·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏',
  '801': '·Ä°·Äú·ÄØ·Äï·Ä∫·ÄÖ·ÄÄ·Ä¨·Ä∏'
};

function formatDate(d) {
  const options = { year: 'numeric', month: 'short', day: 'numeric', timeZone: 'Asia/Tokyo' };
  return new Date(d).toLocaleDateString('en-US', options);
}

function formatDuration(ms) {
  const totalMinutes = Math.round(ms / 60000);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  if (hours > 0) return `${hours} hr ${minutes} min`;
  return `${minutes} min`;
}

function getFooterHeight() {
  const el = document.querySelector('.fixed-bottom-wrapper');
  return el ? el.offsetHeight : 0;
}

function updateContainerPadding() {
  const container = document.querySelector('.container');
  const footerH = getFooterHeight();
  container.style.paddingBottom = (footerH + 16) + 'px';
}

function scrollToLastActivity(smooth = true) {
  const container = document.querySelector('.container');
  updateContainerPadding();
  const behavior = smooth ? 'smooth' : 'auto';
  requestAnimationFrame(() => {
    container.scrollTo({ top: container.scrollHeight, behavior });
  });
}

function renderAllActivities(scrollToLast = false) {
  const container = document.getElementById('activityContainer');
  container.innerHTML = '';
  let savedActivities = JSON.parse(localStorage.getItem('activities') || '[]');

  const groups = {};
  savedActivities.forEach((act, index) => {
    if (act.startTimestamp) {
      const startDate = new Date(act.startTimestamp);
      const dateKey = formatDate(startDate);
      if (!groups[dateKey]) groups[dateKey] = [];
      groups[dateKey].push({ act, index });
    }
  });

  const todayKey = formatDate(new Date());
  if (!groups[todayKey]) groups[todayKey] = [];

  const sortedDates = Object.keys(groups).sort((a, b) => new Date(a) - new Date(b));

  sortedDates.forEach(date => {
    const header = document.createElement('h2');
    header.className = 'date-header';
    header.innerHTML = `${date} <button onclick="copyForDate('${date}')" class="copy-button">Copy</button>`;
    container.appendChild(header);

    const wrapper = document.createElement('div');
    wrapper.className = 'table-wrapper';

    const table = document.createElement('table');
    table.innerHTML = `
      <thead>
        <tr>
          <th></th>
          <th>Activity</th>
          <th>Time</th>
          <th>Duration</th>
          <th>‚úî</th>
        </tr>
      </thead>
      <tbody></tbody>
    `;
    const tbody = table.querySelector('tbody');

    groups[date].forEach(({ act, index }) => {
      const start = new Date(act.startTimestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Tokyo' });
      const end = act.endTimestamp ? new Date(act.endTimestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Tokyo' }) : '';
      const duration = act.endTimestamp ? formatDuration(new Date(act.endTimestamp) - new Date(act.startTimestamp)) : '';
      const checked = act.endTimestamp ? 'checked' : '';
      const row = document.createElement('tr');
      if (!act.endTimestamp) row.classList.add("active");
      row.dataset.index = index;
      row.innerHTML = `
        <td><button class="delete-button" onclick="deleteActivity(${index})">D</button></td>
        <td>${act.activity}</td>
        <td>${start}<br>${end}</td>
        <td>${duration}</td>
        <td><input type="checkbox" ${checked} onclick="toggleCompleted(${index}, this.checked)"></td>
      `;
      tbody.appendChild(row);
    });

    const motivationRow = document.createElement('tr');
    motivationRow.className = 'motivation-row';
    motivationRow.innerHTML = `<td colspan="5">I WORK FOR MY LOVES</td>`;
    tbody.appendChild(motivationRow);

    wrapper.appendChild(table);
    container.appendChild(wrapper);
  });

  updateContainerPadding();
  if (scrollToLast && savedActivities.length > 0) {
    setTimeout(() => scrollToLastActivity(true), 50);
  }
}

function appendNumber(num) {
  currentNumber += num;
  document.getElementById('numberInput').value = currentNumber;

  // üî• Auto-scroll when first number is entered
  if (currentNumber.length === 1) {
    setTimeout(() => scrollToLastActivity(true), 50);
  }
}

function clearNumber() {
  currentNumber = '';
  const input = document.getElementById('numberInput');
  input.value = '';
  input.style.color = 'black';
}

function deleteActivity(index) {
  let savedActivities = JSON.parse(localStorage.getItem('activities') || '[]');
  savedActivities.splice(index, 1);
  localStorage.setItem('activities', JSON.stringify(savedActivities));
  renderAllActivities(true);
}

function toggleCompleted(index, checked) {
  let savedActivities = JSON.parse(localStorage.getItem('activities') || '[]');
  if (checked && !savedActivities[index].endTimestamp) savedActivities[index].endTimestamp = new Date().toISOString();
  else if (!checked) savedActivities[index].endTimestamp = null;
  localStorage.setItem('activities', JSON.stringify(savedActivities));
  renderAllActivities(true);
}

async function copyForDate(date) {
  const savedActivities = JSON.parse(localStorage.getItem('activities') || '[]');
  let tsv = "Activity\tStart-End\tDuration\tCompleted\n";
  savedActivities
    .filter(act => formatDate(act.startTimestamp) === date)
    .forEach(act => {
      const start = new Date(act.startTimestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Tokyo' });
      const end = act.endTimestamp ? new Date(act.endTimestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Tokyo' }) : '';
      const duration = act.endTimestamp ? formatDuration(new Date(act.endTimestamp) - new Date(act.startTimestamp)) : '';
      const completed = act.endTimestamp ? 'Yes' : 'No';
      tsv += `${act.activity}\t${start}-${end}\t${duration}\t${completed}\n`;
    });
  try {
    await navigator.clipboard.writeText(tsv);
    alert('Copied to clipboard!');
  } catch (err) {
    console.error('Failed to copy:', err);
    alert('Failed to copy to clipboard.');
  }
}

function submitActivity() {
  const input = document.getElementById('numberInput');
  if (!currentNumber) {
    input.value = "Please enter a number";
    input.style.color = "red";
    setTimeout(() => { input.value = ''; input.style.color = 'black'; }, 2000);
    return;
  }

  const activity = activityMap[currentNumber];
  if (!activity) {
    input.value = "Please try listed number?";
    input.style.color = "green";
    currentNumber = '';
    setTimeout(() => { input.value = ''; input.style.color = 'black'; }, 2000);
    return;
  }

  let savedActivities = JSON.parse(localStorage.getItem('activities') || '[]');

  if (savedActivities.length > 0) {
    let last = savedActivities[savedActivities.length - 1];
    if (!last.endTimestamp) {
      last.endTimestamp = new Date().toISOString();
    }
  }

  savedActivities.push({ startTimestamp: new Date().toISOString(), activity: activity, endTimestamp: null });
  localStorage.setItem('activities', JSON.stringify(savedActivities));
  clearNumber();
  renderAllActivities(true);

  setTimeout(() => scrollToLastActivity(true), 50);
}

function toggleNumberPad() {
  const grid = document.getElementById('numberPadGrid');
  const hideBtn = document.getElementById('hideButton');
  padHidden = !padHidden;
  const buttons = [...grid.querySelectorAll('button')].filter(b => b.id !== 'hideButton');
  buttons.forEach(b => b.style.display = padHidden ? 'none' : 'inline-block');
  hideBtn.innerText = padHidden ? 'S' : 'H';

  updateContainerPadding();
  setTimeout(() => scrollToLastActivity(true), 50);
}

document.getElementById('numberInput').addEventListener('click', () => {
  if (padHidden) toggleNumberPad();
});

const activityContainer = document.getElementById('activityContainer');
const observer = new MutationObserver(() => {
  updateContainerPadding();
  if (document.querySelectorAll('.table-wrapper tr:not(.motivation-row)').length > 0) {
    scrollToLastActivity(true);
  }
});
observer.observe(activityContainer, { childList: true, subtree: true });

window.addEventListener('resize', () => {
  updateContainerPadding();
  scrollToLastActivity(false);
});
window.addEventListener('orientationchange', () => {
  setTimeout(() => {
    updateContainerPadding();
    scrollToLastActivity(false);
  }, 100);
});

window.onload = () => {
  updateContainerPadding();
  renderAllActivities(true);

  // üî• Ensure autoscroll after first load
  setTimeout(() => scrollToLastActivity(true), 100);
};
</script>
</body>
</html>
